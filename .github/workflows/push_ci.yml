jobs:
  build:
    env:
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_HARDLINK: 'true'
      CCACHE_NOHASHDIR: 'true'
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }} && success()
      && github.ref == 'refs/heads/main' }}
    name: Build CI (Push)
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        fetch-depth: 0
        submodules: recursive
    - continue-on-error: true
      name: set up JDK 17
      uses: actions/setup-java@v4.2.1
      with:
        distribution: adopt
        java-version: '17'
    - continue-on-error: true
      name: Setup cmake
      run: 'echo "ANDROID_HOME=${ANDROID_HOME}"

        echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"

        mkdir -p "$ANDROID_HOME/licenses/"

        echo > "$ANDROID_HOME/licenses/android-sdk-license"

        echo -n 24333f8a63b6825ea9c5514f83c2829b004d1fee > "$ANDROID_HOME/licenses/android-sdk-license"

        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "cmake;3.22.1"
        --sdk_root=${ANDROID_SDK_ROOT}

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        '
    - continue-on-error: true
      name: Install ccache
      run: 'sudo apt install -y ccache

        ccache -o max_size=1G

        ccache -o hash_dir=false

        ccache -o hard_link=true

        ccache -o compiler_check=''%compiler% -dumpmachine; %compiler% -dumpversion''

        ccache -zp

        '
    - continue-on-error: true
      name: Cache Native Build
      uses: actions/cache@v4.0.2
      with:
        key: native-cache-${{ github.sha }}
        path: '~/.cache/ccache

          ~/.ccache

          app/build/.lto-cache

          '
        restore-keys: native-cache-
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/gradle-build-action@v3.2.1
    - continue-on-error: true
      env:
        KEYSTORE_PASSWORD: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
        KEYSTORE_PATH: ../keystore.jks
        KEY_ALIAS: ${{ secrets.SIGN_ALIAS }}
        KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}
      name: Build with Gradle
      run: 'echo ''org.gradle.parallel=true'' >> gradle.properties

        echo ''org.gradle.vfs.watch=true'' >> gradle.properties

        sed -i ''s/org.gradle.configuration-cache=true//g'' gradle.properties

        echo ''buildCache { local { removeUnusedEntriesAfterDays = 1 } }'' >> settings.gradle.kts

        echo ${{ secrets.SIGN_KEYSTORE_BASE64 }} | base64 -d > keystore.jks

        ./gradlew :app:synthesizeDistReleaseApksCI :app:extractReleaseNativeDebugMetadata

        ccache -s

        echo "APK_FILE_ARM32=$(find app/build/outputs/ci -name ''*arm32.apk'')" >>
        $GITHUB_ENV

        echo "APK_FILE_ARM64=$(find app/build/outputs/ci -name ''*arm64.apk'')" >>
        $GITHUB_ENV

        echo "APK_FILE_ARMALL=$(find app/build/outputs/ci -name ''*armAll.apk'')"
        >> $GITHUB_ENV

        echo "APK_FILE_UNIVERSAL=$(find app/build/outputs/ci -name ''*universal.apk'')"
        >> $GITHUB_ENV

        echo "SYMBOL_FILE=app/build/intermediates/native_debug_metadata/release/extractReleaseNativeDebugMetadata/out"
        >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Show Artifacts SHA256
      run: 'echo "### Build Success :rocket:" >> $GITHUB_STEP_SUMMARY

        echo "|ABI|SHA256|" >> $GITHUB_STEP_SUMMARY

        echo "|:--------:|:----------|" >> $GITHUB_STEP_SUMMARY

        arm32=($(sha256sum ${{ env.APK_FILE_ARM32 }}))

        echo "|arm32|$arm32" >> $GITHUB_STEP_SUMMARY

        arm64=($(sha256sum ${{ env.APK_FILE_ARM64 }}))

        echo "|arm64|$arm64" >> $GITHUB_STEP_SUMMARY

        armAll=($(sha256sum ${{ env.APK_FILE_ARMALL }}))

        echo "|armAll|$armAll" >> $GITHUB_STEP_SUMMARY

        universal=($(sha256sum ${{ env.APK_FILE_UNIVERSAL }}))

        echo "|universal|$universal" >> $GITHUB_STEP_SUMMARY

        '
    - continue-on-error: true
      name: Upload Artifacts(arm32)
      uses: actions/upload-artifact@v4
      with:
        name: QAuxiliary-release-${{ github.event.head_commit.id }}-arm32
        path: ${{ env.APK_FILE_ARM32 }}
    - continue-on-error: true
      name: Upload Artifacts(arm64)
      uses: actions/upload-artifact@v4
      with:
        name: QAuxiliary-release-${{ github.event.head_commit.id }}-arm64
        path: ${{ env.APK_FILE_ARM64 }}
    - continue-on-error: true
      name: Upload Artifacts(armAll)
      uses: actions/upload-artifact@v4
      with:
        name: QAuxiliary-release-${{ github.event.head_commit.id }}-armAll
        path: ${{ env.APK_FILE_ARMALL }}
    - continue-on-error: true
      name: Upload Artifacts(universal)
      uses: actions/upload-artifact@v4
      with:
        name: QAuxiliary-release-${{ github.event.head_commit.id }}-universal
        path: ${{ env.APK_FILE_UNIVERSAL }}
    - continue-on-error: true
      name: Upload Artifacts(symbol)
      uses: actions/upload-artifact@v4
      with:
        name: QAuxiliary-release-${{ github.event.head_commit.id }}-symbol
        path: ${{ env.SYMBOL_FILE }}
  telegram-bot-api:
    name: Telegram Bot API
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - continue-on-error: true
      name: Clone Telegram Bot API
      run: 'git clone --recursive https://github.com/tdlib/telegram-bot-api.git

        git status telegram-bot-api >> telegram-bot-api-status

        '
    - continue-on-error: true
      id: cache-bot-api
      name: Cache Bot API Binary
      uses: actions/cache@v4.0.2
      with:
        key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
        path: telegram-bot-api-binary
    - continue-on-error: true
      if: steps.cache-bot-api.outputs.cache-hit != 'true'
      name: Compile Telegram Bot API
      run: 'sudo apt-get update

        sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++

        cd telegram-bot-api

        rm -rf build

        mkdir build

        cd build

        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..

        cmake --build . --target install -j$(nproc)

        cd ../..

        ls -l telegram-bot-api/bin/telegram-bot-api*

        cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary

        '
    - continue-on-error: true
      name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: telegram-bot-api-binary
        path: telegram-bot-api-binary
  upload-taichi:
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    name: Upload TaiChi
    needs:
    - build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - continue-on-error: true
      name: Release
      run: 'curl "https://gist.githubusercontent.com/qwq233/2a903f28a38d48d57731a1e4d6358948/raw/80e515d659a6f3c4737a1674f50fae5087e1f83c/taichi.py"
        -o taichi.py

        sudo apt install -y python3-pip

        pip3 install requests

        echo ${{ secrets.TC_UPLOAD_USER_TOKEN }} | base64 -d > taichi.json

        export release=$(find $OUTPUT -name "*armAll.apk")

        python3 taichi.py $release

        '
  upload-telegram:
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    name: Upload Release
    needs:
    - build
    - telegram-bot-api
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - continue-on-error: true
      name: Download Telegram Bot API Binary
      uses: actions/download-artifact@v4
      with:
        name: telegram-bot-api-binary
        path: .
    - continue-on-error: true
      env:
        COMMIT_MESSAGE: 'New push to GitHub\!

          ```

          ${{ github.event.head_commit.message }}

          ```by `${{ github.event.head_commit.author.name }}`

          See commit detail [here](${{ github.event.head_commit.url }})

          '
        COMMIT_URL: ${{ github.event.head_commit.url }}
      name: Release
      run: "ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ[\"\
        COMMIT_MESSAGE\"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else\
        \ json.dumps(os.environ[\"COMMIT_URL\"])))'`\nexport arm32=$(find artifacts\
        \ -name \"*arm32.apk\")\nexport arm64=$(find artifacts -name \"*arm64.apk\"\
        )\nexport armAll=$(find artifacts -name \"*armAll.apk\")\nexport universal=$(find\
        \ artifacts -name \"*universal.apk\")\nexport SYMBOL_ZIP_NAME=$(echo $universal\
        \ | sed 's/universal.apk/symbol.zip/')\nfind artifacts -name \"*.so.dbg\"\
        \ -print | zip \"$SYMBOL_ZIP_NAME\" -@\nchmod +x telegram-bot-api-binary\n\
        ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16\
        \ --local 2>&1 > /dev/null &\ncurl -v \"http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN\
        \  }}/sendMediaGroup?chat_id=-1001732413298&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm64%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm32%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FarmAll%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Funiversal%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fsymbol%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D\"\
        \ \\\n -F arm32=\"@$arm32\" \\\n -F arm64=\"@$arm64\" \\\n -F armAll=\"@$armAll\"\
        \ \\\n -F universal=\"@$universal\" \\\n -F symbol=\"@$SYMBOL_ZIP_NAME\"\n\
        pkill telegram-bot\n"
name: main
on:
  repository_dispatch:
    types: trigger-ga___push_ci.yml
